# Generated by Django 4.2.13 on 2024-05-08 11:41

import apis_core.generic.abc
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('apis_metainfo', '0012_remove_rootobject_deprecated_name'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('apis_ontology', '0008_alter_person_alternative_label'),
    ]

    operations = [
        migrations.CreateModel(
            name='VersionEvent',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='Start')),
                ('end_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='End')),
                ('review', models.BooleanField(default=False, help_text='Should be set to True, if the data record holds up quality standards.')),
                ('status', models.CharField(blank=True, max_length=100)),
                ('references', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('published', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('alternative_label', models.TextField(blank=True, help_text='Alternativer Name.', null=True, verbose_name='Alternativer Name')),
                ('type', models.CharField(blank=True, choices=[('Hochzeit', 'Hochzeit'), ('Landtag', 'Landtag'), ('Fest/Turnier', 'Fest/Turnier'), ('Schlacht', 'Schlacht'), ('Gesandtschaft/Reise', 'Gesandtschaft/Reise'), ('Taufe', 'Taufe'), ('Amtseinsetzung', 'Amtseinsetzung'), ('Reichstag', 'Reichstag')], help_text='Typ des Ereignisses.', max_length=19, verbose_name='Typ')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_contenttype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionFunction',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='Start')),
                ('end_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='End')),
                ('review', models.BooleanField(default=False, help_text='Should be set to True, if the data record holds up quality standards.')),
                ('status', models.CharField(blank=True, max_length=100)),
                ('references', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('published', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('alternative_label', models.TextField(blank=True, help_text='Andere Namen für die Funktion.', null=True, verbose_name='Alternativer Name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_contenttype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionInstitution',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='Start')),
                ('end_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='End')),
                ('review', models.BooleanField(default=False, help_text='Should be set to True, if the data record holds up quality standards.')),
                ('status', models.CharField(blank=True, max_length=100)),
                ('references', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('published', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('alternative_label', models.TextField(blank=True, help_text='Alternativer Name der Institution.', null=True, verbose_name='Alternativer Name')),
                ('type', models.CharField(blank=True, choices=[('Kanzlei', 'Kanzlei'), ('Hofkapelle', 'Hofkapelle'), ('Küche', 'Küche'), ('(Dom-)Kapitel', '(Dom-)Kapitel'), ('Universität', 'Universität'), ('Kloster', 'Kloster'), ('Frauenzimmer', 'Frauenzimmer'), ('Bistum', 'Bistum'), ('Pfarrei', 'Pfarrei')], help_text='Art der institution.', max_length=13, verbose_name='Typ')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_contenttype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionPerson',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='Start')),
                ('end_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='End')),
                ('review', models.BooleanField(default=False, help_text='Should be set to True, if the data record holds up quality standards.')),
                ('status', models.CharField(blank=True, max_length=100)),
                ('references', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('published', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, editable=False, null=True)),
                ('first_name', models.CharField(blank=True, help_text='Vorname der Person.', max_length=1024, null=True, verbose_name='Vorname')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('gender', models.CharField(blank=True, choices=[('männlich', 'männlich'), ('weiblich', 'weiblich'), ('unbekannt', 'unbekannt')], help_text='Geschlecht der Person.', max_length=9, verbose_name='Geschlecht')),
                ('alternative_label', models.TextField(blank=True, help_text='Feld um alternative Namen anzugeben.', null=True, verbose_name='Alternative Namen')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_contenttype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionPlace',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='Start')),
                ('end_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='End')),
                ('review', models.BooleanField(default=False, help_text='Should be set to True, if the data record holds up quality standards.')),
                ('status', models.CharField(blank=True, max_length=100)),
                ('references', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('published', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('alternative_label', models.TextField(blank=True, help_text='Alternativer Name für einen Ort.', null=True, verbose_name='Alternativer Name')),
                ('type', models.CharField(blank=True, choices=[('Stadt', 'Stadt'), ('Dorf/Nachbarschaft/Gemein/Siedlung/Weiler', 'Dorf/Nachbarschaft/Gemein/Siedlung/Weiler'), ('Burg/Schloss', 'Burg/Schloss'), ('Land/Herrschaftskomplex', 'Land/Herrschaftskomplex'), ('Landschaft/Region', 'Landschaft/Region'), ('Lehen', 'Lehen'), ('Haus/Hof', 'Haus/Hof'), ('Gericht', 'Gericht'), ('Kloster', 'Kloster'), ('Gewässer', 'Gewässer'), ('Grundherrschaft', 'Grundherrschaft'), ('Hofmark', 'Hofmark'), ('Tal', 'Tal'), ('Berg', 'Berg'), ('Bergrevier', 'Bergrevier'), ('Pflege', 'Pflege'), ('(Land-)Vogtei', '(Land-)Vogtei'), ('Propstei', 'Propstei')], help_text='Art des Ortes.', max_length=41, verbose_name='Typ')),
                ('latitude', models.FloatField(blank=True, help_text='Breitengrad des Ortes. Bei Polygonen wird die Mitte verwendet.', null=True, verbose_name='Breitengrad')),
                ('longitude', models.FloatField(blank=True, help_text='Längengrad des Ortes. Bei Polygonen wird die Mitte verwendet.', null=True, verbose_name='Längengrad')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_contenttype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionSalary',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_start_date', models.DateField(blank=True, editable=False, null=True)),
                ('end_end_date', models.DateField(blank=True, editable=False, null=True)),
                ('start_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='Start')),
                ('end_date_written', models.CharField(blank=True, max_length=255, null=True, verbose_name='End')),
                ('review', models.BooleanField(default=False, help_text='Should be set to True, if the data record holds up quality standards.')),
                ('status', models.CharField(blank=True, max_length=100)),
                ('references', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('published', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('typ', models.CharField(blank=True, choices=[('Sold', 'Sold'), ('Zehrung', 'Zehrung'), ('Provision', 'Provision'), ('Kredit', 'Kredit'), ('Sonstiges', 'Sonstiges'), ('Burghut', 'Burghut'), ('Botenlohn', 'Botenlohn')], help_text='Art des Gehalts.', max_length=9, verbose_name='Typ')),
                ('repetitionType', models.CharField(blank=True, choices=[('einfach', 'einfach'), ('wiederholend', 'wiederholend')], help_text='Typ des Gehalts.', max_length=12, verbose_name='Typ Wiederholungen')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_contenttype', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionSalary_collection',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('collection', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_metainfo.collection')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='apis_ontology.versionsalary')),
                ('salary', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_ontology.salary')),
            ],
            options={
                'verbose_name': 'VersionSalary_collection',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='VersionPlace_collection',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('collection', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_metainfo.collection')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='apis_ontology.versionplace')),
                ('place', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_ontology.place')),
            ],
            options={
                'verbose_name': 'VersionPlace_collection',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='VersionPerson_collection',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('collection', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_metainfo.collection')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='apis_ontology.versionperson')),
                ('person', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_ontology.person')),
            ],
            options={
                'verbose_name': 'VersionPerson_collection',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='VersionInstitution_collection',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('collection', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_metainfo.collection')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='apis_ontology.versioninstitution')),
                ('institution', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_ontology.institution')),
            ],
            options={
                'verbose_name': 'VersionInstitution_collection',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='VersionFunction_collection',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('collection', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_metainfo.collection')),
                ('function', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_ontology.function')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='apis_ontology.versionfunction')),
            ],
            options={
                'verbose_name': 'VersionFunction_collection',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='VersionEvent_collection',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('collection', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_metainfo.collection')),
                ('event', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_ontology.event')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='apis_ontology.versionevent')),
            ],
            options={
                'verbose_name': 'VersionEvent_collection',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
